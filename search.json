[
  {
    "objectID": "examples/notebooks/basic_example.html",
    "href": "examples/notebooks/basic_example.html",
    "title": "Example of the BoreFlow package",
    "section": "",
    "text": "Example calculation of a predefined flow on a horizontal surface and a steep slope.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom boreflow import BCArray, Geometry, Simulation, Flux, Limiter, TimeIntegration\n\n\n# 1) Create geometry\nx = np.array([0, 2, 11])  # X-coordinate x[i]\nz = np.array([3, 3, 0])  # Elevation z[i] at x[i]\nn = np.array([0.0175, 0.0175])  # Manning roughness (n) between x[i] and x[i+1]\ngeometry = Geometry(x, z, n)\n\n# Plot the geometry\nplt.figure()\nplt.plot(x, z, color=\"black\", label=\"Geometry\")\nplt.plot([x[0]], [z[0]], \"o\", color=\"red\", label=\"Inflow\")\nplt.plot([x[-1]], [z[-1]], \"o\", color=\"blue\", label=\"Free outflow\")\nplt.legend()\nplt.xlabel(\"x-coordinate [m]\")\nplt.ylabel(\"z-coordinate [m]\")\nplt.axis(\"equal\")\nplt.show()\n\n\n\n\n\n\n\n\n\n# 2) Create boundary conditions\nt = np.array([0, 1, 4])\nh = np.array([0.5, 0.8, 0])\nu = np.array([1.0, 2.0, 0])\nbc = BCArray(t, h, u)\n\n# 3) Initialize simulation settings\nsim = Simulation(t_end=10.0, cfl=0.2, max_dt=0.01, nx=110)\n\n# 4) Run the simulation\nresults = sim.run(geometry, bc, Limiter.minmod, Flux.HLL, TimeIntegration.EF)\n\nSimulating:   0%|          | 0.00/10.00 sSimulating:   5%|▌         | 0.54/10.00 sSimulating:  11%|█         | 1.09/10.00 sSimulating:  15%|█▍        | 1.47/10.00 sSimulating:  18%|█▊        | 1.76/10.00 sSimulating:  20%|█▉        | 1.99/10.00 sSimulating:  22%|██▏       | 2.17/10.00 sSimulating:  23%|██▎       | 2.31/10.00 sSimulating:  24%|██▍       | 2.43/10.00 sSimulating:  25%|██▌       | 2.54/10.00 sSimulating:  26%|██▋       | 2.63/10.00 sSimulating:  27%|██▋       | 2.72/10.00 sSimulating:  28%|██▊       | 2.80/10.00 sSimulating:  29%|██▊       | 2.87/10.00 sSimulating:  29%|██▉       | 2.94/10.00 sSimulating:  30%|███       | 3.01/10.00 sSimulating:  31%|███       | 3.09/10.00 sSimulating:  32%|███▏      | 3.15/10.00 sSimulating:  32%|███▏      | 3.22/10.00 sSimulating:  33%|███▎      | 3.29/10.00 sSimulating:  34%|███▎      | 3.36/10.00 sSimulating:  34%|███▍      | 3.43/10.00 sSimulating:  35%|███▍      | 3.50/10.00 sSimulating:  36%|███▌      | 3.57/10.00 sSimulating:  36%|███▋      | 3.64/10.00 sSimulating:  37%|███▋      | 3.71/10.00 sSimulating:  38%|███▊      | 3.79/10.00 sSimulating:  39%|███▊      | 3.86/10.00 sSimulating:  39%|███▉      | 3.94/10.00 sSimulating:  40%|████      | 4.01/10.00 sSimulating:  41%|████      | 4.09/10.00 sSimulating:  42%|████▏     | 4.16/10.00 sSimulating:  42%|████▏     | 4.24/10.00 sSimulating:  43%|████▎     | 4.32/10.00 sSimulating:  44%|████▍     | 4.40/10.00 sSimulating:  45%|████▍     | 4.48/10.00 sSimulating:  46%|████▌     | 4.56/10.00 sSimulating:  46%|████▋     | 4.64/10.00 sSimulating:  47%|████▋     | 4.73/10.00 sSimulating:  48%|████▊     | 4.81/10.00 sSimulating:  49%|████▉     | 4.90/10.00 sSimulating:  50%|████▉     | 4.99/10.00 sSimulating:  51%|█████     | 5.08/10.00 sSimulating:  52%|█████▏    | 5.17/10.00 sSimulating:  53%|█████▎    | 5.26/10.00 sSimulating:  54%|█████▎    | 5.36/10.00 sSimulating:  55%|█████▍    | 5.47/10.00 sSimulating:  56%|█████▌    | 5.57/10.00 sSimulating:  57%|█████▋    | 5.67/10.00 sSimulating:  58%|█████▊    | 5.79/10.00 sSimulating:  59%|█████▉    | 5.90/10.00 sSimulating:  60%|██████    | 6.02/10.00 sSimulating:  61%|██████▏   | 6.14/10.00 sSimulating:  63%|██████▎   | 6.26/10.00 sSimulating:  64%|██████▍   | 6.40/10.00 sSimulating:  65%|██████▌   | 6.54/10.00 sSimulating:  67%|██████▋   | 6.68/10.00 sSimulating:  68%|██████▊   | 6.84/10.00 sSimulating:  70%|███████   | 7.00/10.00 sSimulating:  72%|███████▏  | 7.17/10.00 sSimulating:  73%|███████▎  | 7.34/10.00 sSimulating:  75%|███████▌  | 7.53/10.00 sSimulating:  77%|███████▋  | 7.73/10.00 sSimulating:  79%|███████▉  | 7.93/10.00 sSimulating:  82%|████████▏ | 8.15/10.00 sSimulating:  84%|████████▍ | 8.38/10.00 sSimulating:  86%|████████▌ | 8.61/10.00 sSimulating:  89%|████████▊ | 8.85/10.00 sSimulating:  91%|█████████ | 9.09/10.00 sSimulating:  93%|█████████▎| 9.33/10.00 sSimulating:  96%|█████████▌| 9.57/10.00 sSimulating:  98%|█████████▊| 9.81/10.00 sSimulating: 100%|██████████| 10.00/10.00 s\n\n\nSimulation done in 8.30 sec\n\n\n\n\n\n\n# Plot peak flow velocity and peak flow thickness\nfig, (ax0, ax1, ax2) = plt.subplots(1, 3, figsize=[12, 4])\n\n# Mark the transition between the horizontal surface and the sloped surface (x = 2m / s = 2m)\n[ax.axvline(2.0, color=\"grey\", ls=\":\") for ax in [ax0, ax1, ax2]]\n\n# Get and plot peak flow characteristics\nh, u, q = results.get_peak_flow()\nax0.plot(results.s, h, color=\"black\")\nax1.plot(results.s, u, color=\"black\")\nax2.plot(results.s, q, color=\"black\")\n\n# Plot layout\n[ax.set_xlabel(\"Distance along geometry (s-coordinate) [m]\") for ax in [ax0, ax1]]\nax0.set_ylabel(\"Peak flow thickness [m]\")\nax1.set_ylabel(\"Peak depth-avg flow velocity [m/s]\")\nax2.set_ylabel(\"Peak flow discharge [m2/s]\")\n[ax.set_xlim(0, np.max(results.s)) for ax in [ax0, ax1, ax2]]\n[ax.set_ylim(0, None) for ax in [ax0, ax1, ax2]]\nfig.suptitle(\"Peak Flow Characteristics along Geometry\")\nfig.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n# Plot\nfig, (ax0, ax1) = plt.subplots(1, 2, figsize=[9, 4])\n\n# Get and plot the flow at s=5m\nres_t, res_h, res_u = results.get_st(s=5.0)\nax0.plot(res_t, res_h, color=\"black\")\nax1.plot(res_t, res_u, color=\"black\")\n\n# Plot layout\n[ax.set_xlabel(\"Time [s]\") for ax in [ax0, ax1]]\nax0.set_ylabel(\"Flow thickness [m]\")\nax1.set_ylabel(\"Depth-avg flow velocity [m/s]\")\n[ax.set_xlim(0, np.max(res_t)) for ax in [ax0, ax1]]\n[ax.set_ylim(0, None) for ax in [ax0, ax1]]\nfig.suptitle(\"Temporal Evolution of Flow at s = 5m\")\nfig.tight_layout()\nplt.show()"
  },
  {
    "objectID": "reference/BCWOSFD.html",
    "href": "reference/BCWOSFD.html",
    "title": "BCWOSFD",
    "section": "",
    "text": "BCWOSFD(self, volume, tru_tovt=0.02, trh_tovt=0.08)\nBoundary condition for overtopping flow, based on fit observed at the first measurement location and the temporal flow profile of Hughes et al. (2012).\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nvolume\nfloat\nThe to be simulated individual overtopping volume\n\n\nu_peak\nfloat\nPeak flow velocity\n\n\nh_peak\nfloat\nPeak flow thickness\n\n\nt_ovt\nfloat\nThe total time of the overtopping event\n\n\ntru_tovt\nfloat\nRatio between the time of upeak and the overtopping time (tovt) (default: 0.02)\n\n\ntrh_tovt\nfloat\nRatio between the time of hpeak and the overtopping time (tovt) (default: 0.08)\n\n\ncoef\nfloat\nCoefficient optimized such that the integrated u(t) and h(t) equal the given volume\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_flow\nCompute (h, u) for time t based on current or given coef.\n\n\noptimize_flow\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nBCWOSFD.get_flow(t, coef=None)\nCompute (h, u) for time t based on current or given coef.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nt\nUnion[float, np.ndarray]\nTime as a float or array\nrequired\n\n\ncoef\nfloat\nCoefficient, if None use the coefficient determined by the optimize_flow function (default: None)\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n2D array with (h, u) for t\n\n\n\n\n\n\n\nBCWOSFD.optimize_flow()\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nThe optimized coefficient"
  },
  {
    "objectID": "reference/BCWOSFD.html#attributes",
    "href": "reference/BCWOSFD.html#attributes",
    "title": "BCWOSFD",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nvolume\nfloat\nThe to be simulated individual overtopping volume\n\n\nu_peak\nfloat\nPeak flow velocity\n\n\nh_peak\nfloat\nPeak flow thickness\n\n\nt_ovt\nfloat\nThe total time of the overtopping event\n\n\ntru_tovt\nfloat\nRatio between the time of upeak and the overtopping time (tovt) (default: 0.02)\n\n\ntrh_tovt\nfloat\nRatio between the time of hpeak and the overtopping time (tovt) (default: 0.08)\n\n\ncoef\nfloat\nCoefficient optimized such that the integrated u(t) and h(t) equal the given volume"
  },
  {
    "objectID": "reference/BCWOSFD.html#methods",
    "href": "reference/BCWOSFD.html#methods",
    "title": "BCWOSFD",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_flow\nCompute (h, u) for time t based on current or given coef.\n\n\noptimize_flow\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nBCWOSFD.get_flow(t, coef=None)\nCompute (h, u) for time t based on current or given coef.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nt\nUnion[float, np.ndarray]\nTime as a float or array\nrequired\n\n\ncoef\nfloat\nCoefficient, if None use the coefficient determined by the optimize_flow function (default: None)\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n2D array with (h, u) for t\n\n\n\n\n\n\n\nBCWOSFD.optimize_flow()\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nThe optimized coefficient"
  },
  {
    "objectID": "reference/BCWOS.html",
    "href": "reference/BCWOS.html",
    "title": "BCWOS",
    "section": "",
    "text": "BCWOS(self, volume, tru_tovt=0.02, trh_tovt=0.08)\nBoundary condition for overtopping flow, based on empirical formulas from van der Meer et al. (2011) and Hughes et al. (2012).\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nvolume\nfloat\nThe to be simulated individual overtopping volume\n\n\nu_peak\nfloat\nPeak flow velocity\n\n\nh_peak\nfloat\nPeak flow thickness\n\n\nt_ovt\nfloat\nThe total time of the overtopping event\n\n\ntru_tovt\nfloat\nRatio between the time of upeak and the overtopping time (tovt) (default: 0.02)\n\n\ntrh_tovt\nfloat\nRatio between the time of hpeak and the overtopping time (tovt) (default: 0.08)\n\n\ncoef\nfloat\nCoefficient optimized such that the integrated u(t) and h(t) equal the given volume\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_flow\nCompute (h, u) for time t based on current or given coef.\n\n\noptimize_flow\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nBCWOS.get_flow(t, coef=None)\nCompute (h, u) for time t based on current or given coef.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nt\nUnion[float, np.ndarray]\nTime as a float or array\nrequired\n\n\ncoef\nfloat\nCoefficient, if None use the coefficient determined by the optimize_flow function (default: None)\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n2D array with (h, u) for t\n\n\n\n\n\n\n\nBCWOS.optimize_flow()\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nThe optimized coefficient"
  },
  {
    "objectID": "reference/BCWOS.html#attributes",
    "href": "reference/BCWOS.html#attributes",
    "title": "BCWOS",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nvolume\nfloat\nThe to be simulated individual overtopping volume\n\n\nu_peak\nfloat\nPeak flow velocity\n\n\nh_peak\nfloat\nPeak flow thickness\n\n\nt_ovt\nfloat\nThe total time of the overtopping event\n\n\ntru_tovt\nfloat\nRatio between the time of upeak and the overtopping time (tovt) (default: 0.02)\n\n\ntrh_tovt\nfloat\nRatio between the time of hpeak and the overtopping time (tovt) (default: 0.08)\n\n\ncoef\nfloat\nCoefficient optimized such that the integrated u(t) and h(t) equal the given volume"
  },
  {
    "objectID": "reference/BCWOS.html#methods",
    "href": "reference/BCWOS.html#methods",
    "title": "BCWOS",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_flow\nCompute (h, u) for time t based on current or given coef.\n\n\noptimize_flow\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nBCWOS.get_flow(t, coef=None)\nCompute (h, u) for time t based on current or given coef.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nt\nUnion[float, np.ndarray]\nTime as a float or array\nrequired\n\n\ncoef\nfloat\nCoefficient, if None use the coefficient determined by the optimize_flow function (default: None)\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n2D array with (h, u) for t\n\n\n\n\n\n\n\nBCWOS.optimize_flow()\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nThe optimized coefficient"
  },
  {
    "objectID": "reference/TimeIntegration.html",
    "href": "reference/TimeIntegration.html",
    "title": "TimeIntegration",
    "section": "",
    "text": "TimeIntegration()\nEnumeration of time integration methods used for solving the Shallow Water Equations (SSSWE).\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nEF\nint\nEuler Forward (1st order) time-stepping method.\n\n\nRK2\nint\nRunge-Kutta (2nd order) time-stepping method."
  },
  {
    "objectID": "reference/TimeIntegration.html#attributes",
    "href": "reference/TimeIntegration.html#attributes",
    "title": "TimeIntegration",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nEF\nint\nEuler Forward (1st order) time-stepping method.\n\n\nRK2\nint\nRunge-Kutta (2nd order) time-stepping method."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "API Reference",
    "section": "",
    "text": "BCArray\nBoundary condition based on pre-defined (t, h, u) arrays.\n\n\nBCOvertopping\nBoundary condition for overtopping flow, based on empirical formulas\n\n\nBCWOS\nBoundary condition for overtopping flow, based on empirical formulas\n\n\nBCWOSFD\nBoundary condition for overtopping flow, based on fit observed at the first\n\n\nBCWOSMillingen\nBoundary condition for overtopping flow, based on fit observed at the first\n\n\nFlux\nEnumeration of flux types used for the calculation of fluxes in shallow water equations.\n\n\nLimiter\nEnumeration of limiter types used for slope limiting in the numerical solution of the shallow water equations.\n\n\nTimeIntegration\nEnumeration of time integration methods used for solving the Shallow Water Equations (SSSWE).\n\n\nGeometry\nRepresents a discretized 1D geometry composed of multiple connected geometry parts,\n\n\nSimulation\nA class to simulate a model using the Finite Volume Method (FVM)."
  },
  {
    "objectID": "reference/index.html#boreflow",
    "href": "reference/index.html#boreflow",
    "title": "API Reference",
    "section": "",
    "text": "BCArray\nBoundary condition based on pre-defined (t, h, u) arrays.\n\n\nBCOvertopping\nBoundary condition for overtopping flow, based on empirical formulas\n\n\nBCWOS\nBoundary condition for overtopping flow, based on empirical formulas\n\n\nBCWOSFD\nBoundary condition for overtopping flow, based on fit observed at the first\n\n\nBCWOSMillingen\nBoundary condition for overtopping flow, based on fit observed at the first\n\n\nFlux\nEnumeration of flux types used for the calculation of fluxes in shallow water equations.\n\n\nLimiter\nEnumeration of limiter types used for slope limiting in the numerical solution of the shallow water equations.\n\n\nTimeIntegration\nEnumeration of time integration methods used for solving the Shallow Water Equations (SSSWE).\n\n\nGeometry\nRepresents a discretized 1D geometry composed of multiple connected geometry parts,\n\n\nSimulation\nA class to simulate a model using the Finite Volume Method (FVM)."
  },
  {
    "objectID": "reference/BCOvertopping.html",
    "href": "reference/BCOvertopping.html",
    "title": "BCOvertopping",
    "section": "",
    "text": "BCOvertopping(self, volume, cota, tru_tovt=0.02, trh_tovt=0.08, unc_ppf=0.5)\nBoundary condition for overtopping flow, based on empirical formulas from van der Meer et al. (2011), van Damme (2016), and Hughes et al. (2012), with uncertainty from van der Vegt et al. (2025).\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nvolume\nfloat\nThe to be simulated individual overtopping volume\n\n\ncota\nfloat\nWaterside slope of the dike (1:cota).\n\n\nunc_ppf\nfloat\nPercent point function (quantile) for uncertainty (default: 0.5).\n\n\nu_peak\nfloat\nPeak flow velocity\n\n\nh_peak\nfloat\nPeak flow thickness\n\n\nt_ovt\nfloat\nThe total time of the overtopping event\n\n\ntru_tovt\nfloat\nRatio between the time of upeak and the overtopping time (tovt) (default: 0.0)\n\n\ntrh_tovt\nfloat\nRatio between the time of hpeak and the overtopping time (tovt) (default: 0.0)\n\n\ncoef\nfloat\nCoefficient optimized such that the integrated u(t) and h(t) equal the given volume\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_flow\nCompute (h, u) for time t based on current or given coef.\n\n\noptimize_flow\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nBCOvertopping.get_flow(t, coef=None)\nCompute (h, u) for time t based on current or given coef.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nt\nUnion[float, np.ndarray]\nTime as a float or array\nrequired\n\n\ncoef\nfloat\nCoefficient, if None use the coefficient determined by the optimize_flow function (default: None)\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n2D array with (h, u) for t\n\n\n\n\n\n\n\nBCOvertopping.optimize_flow()\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nThe optimized coefficient"
  },
  {
    "objectID": "reference/BCOvertopping.html#attributes",
    "href": "reference/BCOvertopping.html#attributes",
    "title": "BCOvertopping",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nvolume\nfloat\nThe to be simulated individual overtopping volume\n\n\ncota\nfloat\nWaterside slope of the dike (1:cota).\n\n\nunc_ppf\nfloat\nPercent point function (quantile) for uncertainty (default: 0.5).\n\n\nu_peak\nfloat\nPeak flow velocity\n\n\nh_peak\nfloat\nPeak flow thickness\n\n\nt_ovt\nfloat\nThe total time of the overtopping event\n\n\ntru_tovt\nfloat\nRatio between the time of upeak and the overtopping time (tovt) (default: 0.0)\n\n\ntrh_tovt\nfloat\nRatio between the time of hpeak and the overtopping time (tovt) (default: 0.0)\n\n\ncoef\nfloat\nCoefficient optimized such that the integrated u(t) and h(t) equal the given volume"
  },
  {
    "objectID": "reference/BCOvertopping.html#methods",
    "href": "reference/BCOvertopping.html#methods",
    "title": "BCOvertopping",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_flow\nCompute (h, u) for time t based on current or given coef.\n\n\noptimize_flow\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nBCOvertopping.get_flow(t, coef=None)\nCompute (h, u) for time t based on current or given coef.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nt\nUnion[float, np.ndarray]\nTime as a float or array\nrequired\n\n\ncoef\nfloat\nCoefficient, if None use the coefficient determined by the optimize_flow function (default: None)\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n2D array with (h, u) for t\n\n\n\n\n\n\n\nBCOvertopping.optimize_flow()\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nThe optimized coefficient"
  },
  {
    "objectID": "reference/BCWOSMillingen.html",
    "href": "reference/BCWOSMillingen.html",
    "title": "BCWOSMillingen",
    "section": "",
    "text": "BCWOSMillingen(self, volume, tru_tovt=0.02, trh_tovt=0.08)\nBoundary condition for overtopping flow, based on fit observed at the first measurement location and the temporal flow profile of Hughes et al. (2012).\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nvolume\nfloat\nThe to be simulated individual overtopping volume\n\n\nu_peak\nfloat\nPeak flow velocity\n\n\nh_peak\nfloat\nPeak flow thickness\n\n\nt_ovt\nfloat\nThe total time of the overtopping event\n\n\ntru_tovt\nfloat\nRatio between the time of upeak and the overtopping time (tovt) (default: 0.02)\n\n\ntrh_tovt\nfloat\nRatio between the time of hpeak and the overtopping time (tovt) (default: 0.08)\n\n\ncoef\nfloat\nCoefficient optimized such that the integrated u(t) and h(t) equal the given volume\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_flow\nCompute (h, u) for time t based on current or given coef.\n\n\noptimize_flow\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nBCWOSMillingen.get_flow(t, coef=None)\nCompute (h, u) for time t based on current or given coef.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nt\nUnion[float, np.ndarray]\nTime as a float or array\nrequired\n\n\ncoef\nfloat\nCoefficient, if None use the coefficient determined by the optimize_flow function (default: None)\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n2D array with (h, u) for t\n\n\n\n\n\n\n\nBCWOSMillingen.optimize_flow()\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nThe optimized coefficient"
  },
  {
    "objectID": "reference/BCWOSMillingen.html#attributes",
    "href": "reference/BCWOSMillingen.html#attributes",
    "title": "BCWOSMillingen",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nvolume\nfloat\nThe to be simulated individual overtopping volume\n\n\nu_peak\nfloat\nPeak flow velocity\n\n\nh_peak\nfloat\nPeak flow thickness\n\n\nt_ovt\nfloat\nThe total time of the overtopping event\n\n\ntru_tovt\nfloat\nRatio between the time of upeak and the overtopping time (tovt) (default: 0.02)\n\n\ntrh_tovt\nfloat\nRatio between the time of hpeak and the overtopping time (tovt) (default: 0.08)\n\n\ncoef\nfloat\nCoefficient optimized such that the integrated u(t) and h(t) equal the given volume"
  },
  {
    "objectID": "reference/BCWOSMillingen.html#methods",
    "href": "reference/BCWOSMillingen.html#methods",
    "title": "BCWOSMillingen",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_flow\nCompute (h, u) for time t based on current or given coef.\n\n\noptimize_flow\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nBCWOSMillingen.get_flow(t, coef=None)\nCompute (h, u) for time t based on current or given coef.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nt\nUnion[float, np.ndarray]\nTime as a float or array\nrequired\n\n\ncoef\nfloat\nCoefficient, if None use the coefficient determined by the optimize_flow function (default: None)\nNone\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n2D array with (h, u) for t\n\n\n\n\n\n\n\nBCWOSMillingen.optimize_flow()\nOptimize coefficient until time series of u(t) and h(t) match the given volume\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nThe optimized coefficient"
  },
  {
    "objectID": "reference/Geometry.html",
    "href": "reference/Geometry.html",
    "title": "Geometry",
    "section": "",
    "text": "Geometry(self, geometry_x, geometry_z, geometry_n)\nRepresents a discretized 1D geometry composed of multiple connected geometry parts, each defined by a pair of x and z coordinates, and associated Manning roughness values.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ngeometry_x\nnp.ndarray\nArray of x-coordinates.\n\n\ngeometry_s\nnp.ndarray\nArrau of s-coordinates (distance along the geometry)\n\n\ngeometry_z\nnp.ndarray\nArray of corresponding z-coordinates (elevation).\n\n\ngeometry_n\nnp.ndarray\nArray of Manning’s n values, one per segment (length = len(x) - 1).\n\n\nx\nnp.ndarray\nDiscretisation cell centers x\n\n\ns\nnp.ndarray\nDiscretisation cell centers s\n\n\nz\nnp.ndarray\nDiscretisation cell centers z\n\n\nt\nnp.ndarray\nTime steps of the results\n\n\nu\nnp.ndarray\nResults flow velocity [t, x]\n\n\nh\nnp.ndarray\nResults flow thickness along z-coordinates [t, x]\n\n\nh_s\nnp.ndarray\nResults flow thickness perpendicular to slope [t, x]\n\n\nt_front\nnp.ndarray\nTime of passing of the wetting front [x]\n\n\nu_front\nnp.ndarray\nVelocity of the wetting front [x]\n\n\nsimulated\nbool\nFlag whether the model is simulated\n\n\nsimulation_time\nfloat\nTime it took to simulate the model\n\n\nboundary_condition\nBCBase\nThe boundary condition applied when simulated\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncheck_geometry\nValidates the consistency of the geometry input arrays.\n\n\nderive_front_velocity\nDerive the time and velocity of the wetting front for this geometry part.\n\n\nget_peak_flow\nGet the peak flow characteristics along the x-coordinate.\n\n\nget_st\nGet the time series of flow variables at a specific s-location along the slope.\n\n\nget_xt\nGet the time series of flow variables at a specific x-location.\n\n\n\n\n\nGeometry.check_geometry()\nValidates the consistency of the geometry input arrays.\n\n\n\nGeometry.derive_front_velocity(threshold=0.01)\nDerive the time and velocity of the wetting front for this geometry part.\nThe wetting front is considered as the point where the water depth exceeds a given threshold. The time of passing (t_front) is calculated based on linear interpolation. The velocity (u_front) of the wetting front is calculated based on second-order differences.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nthreshold\nfloat\nThe threshold for determining the wetting front location (default: 0.01m)\n0.01\n\n\n\n\n\n\n\nGeometry.get_peak_flow(get_h_perpendicular=True, quantile=1.0)\nGet the peak flow characteristics along the x-coordinate.\n\n\nget_h_perpendicular : bool Whether to compute the perpendicular flow thickness (default is True). quantile : float, optional Get the quantiles, quantile=1 is the maximum values (default: 1.0)\n\n\n\nnp.ndarray Numpy 2D array with [hpeak, upeak, qpeak]\n\n\n\n\nGeometry.get_st(s, get_h_perpendicular=True)\nGet the time series of flow variables at a specific s-location along the slope.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ns\nfloat\nThe slope-based coordinate (distance along the geometry).\nrequired\n\n\nget_h_perpendicular\nbool\nWhether to compute the perpendicular flow thickness (default is True).\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray or None\nA np.ndarray containing the time series at location x, or None if x is outside the modeled domain.\n\n\n\n\n\n\n\nGeometry.get_xt(x, get_h_perpendicular=True)\nGet the time series of flow variables at a specific x-location.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nfloat\nThe x-coordinate at which to retrieve the time series.\nrequired\n\n\nget_h_perpendicular\nbool\nWhether to compute the perpendicular water depth (default is True).\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray or None\nA np.ndarray containing the time series [t, h, u] at location x, or None if x is outside the modeled domain."
  },
  {
    "objectID": "reference/Geometry.html#attributes",
    "href": "reference/Geometry.html#attributes",
    "title": "Geometry",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\ngeometry_x\nnp.ndarray\nArray of x-coordinates.\n\n\ngeometry_s\nnp.ndarray\nArrau of s-coordinates (distance along the geometry)\n\n\ngeometry_z\nnp.ndarray\nArray of corresponding z-coordinates (elevation).\n\n\ngeometry_n\nnp.ndarray\nArray of Manning’s n values, one per segment (length = len(x) - 1).\n\n\nx\nnp.ndarray\nDiscretisation cell centers x\n\n\ns\nnp.ndarray\nDiscretisation cell centers s\n\n\nz\nnp.ndarray\nDiscretisation cell centers z\n\n\nt\nnp.ndarray\nTime steps of the results\n\n\nu\nnp.ndarray\nResults flow velocity [t, x]\n\n\nh\nnp.ndarray\nResults flow thickness along z-coordinates [t, x]\n\n\nh_s\nnp.ndarray\nResults flow thickness perpendicular to slope [t, x]\n\n\nt_front\nnp.ndarray\nTime of passing of the wetting front [x]\n\n\nu_front\nnp.ndarray\nVelocity of the wetting front [x]\n\n\nsimulated\nbool\nFlag whether the model is simulated\n\n\nsimulation_time\nfloat\nTime it took to simulate the model\n\n\nboundary_condition\nBCBase\nThe boundary condition applied when simulated"
  },
  {
    "objectID": "reference/Geometry.html#methods",
    "href": "reference/Geometry.html#methods",
    "title": "Geometry",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncheck_geometry\nValidates the consistency of the geometry input arrays.\n\n\nderive_front_velocity\nDerive the time and velocity of the wetting front for this geometry part.\n\n\nget_peak_flow\nGet the peak flow characteristics along the x-coordinate.\n\n\nget_st\nGet the time series of flow variables at a specific s-location along the slope.\n\n\nget_xt\nGet the time series of flow variables at a specific x-location.\n\n\n\n\n\nGeometry.check_geometry()\nValidates the consistency of the geometry input arrays.\n\n\n\nGeometry.derive_front_velocity(threshold=0.01)\nDerive the time and velocity of the wetting front for this geometry part.\nThe wetting front is considered as the point where the water depth exceeds a given threshold. The time of passing (t_front) is calculated based on linear interpolation. The velocity (u_front) of the wetting front is calculated based on second-order differences.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nthreshold\nfloat\nThe threshold for determining the wetting front location (default: 0.01m)\n0.01\n\n\n\n\n\n\n\nGeometry.get_peak_flow(get_h_perpendicular=True, quantile=1.0)\nGet the peak flow characteristics along the x-coordinate.\n\n\nget_h_perpendicular : bool Whether to compute the perpendicular flow thickness (default is True). quantile : float, optional Get the quantiles, quantile=1 is the maximum values (default: 1.0)\n\n\n\nnp.ndarray Numpy 2D array with [hpeak, upeak, qpeak]\n\n\n\n\nGeometry.get_st(s, get_h_perpendicular=True)\nGet the time series of flow variables at a specific s-location along the slope.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ns\nfloat\nThe slope-based coordinate (distance along the geometry).\nrequired\n\n\nget_h_perpendicular\nbool\nWhether to compute the perpendicular flow thickness (default is True).\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray or None\nA np.ndarray containing the time series at location x, or None if x is outside the modeled domain.\n\n\n\n\n\n\n\nGeometry.get_xt(x, get_h_perpendicular=True)\nGet the time series of flow variables at a specific x-location.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nfloat\nThe x-coordinate at which to retrieve the time series.\nrequired\n\n\nget_h_perpendicular\nbool\nWhether to compute the perpendicular water depth (default is True).\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray or None\nA np.ndarray containing the time series [t, h, u] at location x, or None if x is outside the modeled domain."
  },
  {
    "objectID": "reference/Limiter.html",
    "href": "reference/Limiter.html",
    "title": "Limiter",
    "section": "",
    "text": "Limiter()\nEnumeration of limiter types used for slope limiting in the numerical solution of the shallow water equations.\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nKoren\nint\nKoren limiter\n\n\nMC\nint\nMonotonized Central (MC) limiter\n\n\nMC_minmod\nint\nHybrid Monotonized Central (MC) and minmod limiter with minmod applied to low flow thicknesses (&lt;1cm)\n\n\nminmod\nint\nMinmod limiter\n\n\nsuperbee\nint\nSuperbee limiter\n\n\nvanAlbada\nint\nVan Albada symmetric limiter\n\n\nvanLeer\nint\nVan Leer limiter\n\n\nvanLeer_minmod\nint\nHybrid Van Leer and minmod limiter with minmod applied to low flow thicknesses (&lt;1cm)"
  },
  {
    "objectID": "reference/Limiter.html#attributes",
    "href": "reference/Limiter.html#attributes",
    "title": "Limiter",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nKoren\nint\nKoren limiter\n\n\nMC\nint\nMonotonized Central (MC) limiter\n\n\nMC_minmod\nint\nHybrid Monotonized Central (MC) and minmod limiter with minmod applied to low flow thicknesses (&lt;1cm)\n\n\nminmod\nint\nMinmod limiter\n\n\nsuperbee\nint\nSuperbee limiter\n\n\nvanAlbada\nint\nVan Albada symmetric limiter\n\n\nvanLeer\nint\nVan Leer limiter\n\n\nvanLeer_minmod\nint\nHybrid Van Leer and minmod limiter with minmod applied to low flow thicknesses (&lt;1cm)"
  },
  {
    "objectID": "reference/Flux.html",
    "href": "reference/Flux.html",
    "title": "Flux",
    "section": "",
    "text": "Flux()\nEnumeration of flux types used for the calculation of fluxes in shallow water equations.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nRusanov\nint\nRusanov flux\n\n\nHLL\nint\nHarten-Lax-van Leer (HLL) flux"
  },
  {
    "objectID": "reference/Flux.html#attributes",
    "href": "reference/Flux.html#attributes",
    "title": "Flux",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nRusanov\nint\nRusanov flux\n\n\nHLL\nint\nHarten-Lax-van Leer (HLL) flux"
  },
  {
    "objectID": "reference/BCArray.html",
    "href": "reference/BCArray.html",
    "title": "BCArray",
    "section": "",
    "text": "BCArray(self, t, h, u)\nBoundary condition based on pre-defined (t, h, u) arrays.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nt\nnp.ndarray\nArray with the time signal\n\n\nh\nnp.ndarray\nArray with the flow thickness signal\n\n\nu\nnp.ndarray\nArray with the flow velocity signal\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_flow\nCompute (h, u) for time t.\n\n\n\n\n\nBCArray.get_flow(t)\nCompute (h, u) for time t.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nt\nUnion[float, np.ndarray]\nTime as a float or array\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n2D array with (h, u) for t"
  },
  {
    "objectID": "reference/BCArray.html#attributes",
    "href": "reference/BCArray.html#attributes",
    "title": "BCArray",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nt\nnp.ndarray\nArray with the time signal\n\n\nh\nnp.ndarray\nArray with the flow thickness signal\n\n\nu\nnp.ndarray\nArray with the flow velocity signal"
  },
  {
    "objectID": "reference/BCArray.html#methods",
    "href": "reference/BCArray.html#methods",
    "title": "BCArray",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_flow\nCompute (h, u) for time t.\n\n\n\n\n\nBCArray.get_flow(t)\nCompute (h, u) for time t.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nt\nUnion[float, np.ndarray]\nTime as a float or array\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n2D array with (h, u) for t"
  },
  {
    "objectID": "reference/Simulation.html",
    "href": "reference/Simulation.html",
    "title": "Simulation",
    "section": "",
    "text": "Simulation(self, t_end=10, cfl=0.5, max_dt=0.01, nx=100, verbose=True)\nA class to simulate a model using the Finite Volume Method (FVM).\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nbc\nBCBase\nBoundary conditions object applied at the first interface.\n\n\ngeometry\nGeometry\nThe Geometry object of the domain.\n\n\nt_end\nfloat\nTotal simulation time (default: 10s)\n\n\ncfl\nfloat\nCFL (Courant–Friedrichs–Lewy) number for time step stability (default: 0.5)\n\n\nmax_dt\nfloat\nMaximum time step size (default: 0.01s)\n\n\nnx\nint\nSpatial grid resolution (default: 0.1m)\n\n\nverbose\nbool\nFlag to show the progress (default: True)\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nrun\nRun the simulation using the provided geometry, boundary conditions, and solver.\n\n\n\n\n\nSimulation.run(\n    geometry,\n    bc,\n    limiter=Limiter.minmod,\n    flux=Flux.HLL,\n    timeintegration=TimeIntegration.RK2,\n)\nRun the simulation using the provided geometry, boundary conditions, and solver.\nThe simulation involves discretizing the geometry, applying the Finite Volume Method (FVM), and computing the wetting front velocity for each geometry part. The simulation runs until the end time is reached or the conditions specified by the solver are satisfied.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ngeometry\nGeometry\nGeometry object representing the physical domain for the simulation.\nrequired\n\n\nbc\nBCBase\nBoundary conditions for the simulation.\nrequired\n\n\nlimiter\nLimiter\nThe limiter to use in the simulation. The default is Limiter.minmod.\nLimiter.minmod\n\n\nflux\nFlux\nFlux types to use in the simulation. The default is Flux.HLL.\nFlux.HLL\n\n\ntimeintegration\nTimeIntegration\nTime integration scheme to use in the simulation. The default is TimeIntegration.EF.\nTimeIntegration.RK2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nGeometry\nA new copy of the geometry object with the simulation results."
  },
  {
    "objectID": "reference/Simulation.html#attributes",
    "href": "reference/Simulation.html#attributes",
    "title": "Simulation",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nbc\nBCBase\nBoundary conditions object applied at the first interface.\n\n\ngeometry\nGeometry\nThe Geometry object of the domain.\n\n\nt_end\nfloat\nTotal simulation time (default: 10s)\n\n\ncfl\nfloat\nCFL (Courant–Friedrichs–Lewy) number for time step stability (default: 0.5)\n\n\nmax_dt\nfloat\nMaximum time step size (default: 0.01s)\n\n\nnx\nint\nSpatial grid resolution (default: 0.1m)\n\n\nverbose\nbool\nFlag to show the progress (default: True)"
  },
  {
    "objectID": "reference/Simulation.html#methods",
    "href": "reference/Simulation.html#methods",
    "title": "Simulation",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nrun\nRun the simulation using the provided geometry, boundary conditions, and solver.\n\n\n\n\n\nSimulation.run(\n    geometry,\n    bc,\n    limiter=Limiter.minmod,\n    flux=Flux.HLL,\n    timeintegration=TimeIntegration.RK2,\n)\nRun the simulation using the provided geometry, boundary conditions, and solver.\nThe simulation involves discretizing the geometry, applying the Finite Volume Method (FVM), and computing the wetting front velocity for each geometry part. The simulation runs until the end time is reached or the conditions specified by the solver are satisfied.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ngeometry\nGeometry\nGeometry object representing the physical domain for the simulation.\nrequired\n\n\nbc\nBCBase\nBoundary conditions for the simulation.\nrequired\n\n\nlimiter\nLimiter\nThe limiter to use in the simulation. The default is Limiter.minmod.\nLimiter.minmod\n\n\nflux\nFlux\nFlux types to use in the simulation. The default is Flux.HLL.\nFlux.HLL\n\n\ntimeintegration\nTimeIntegration\nTime integration scheme to use in the simulation. The default is TimeIntegration.EF.\nTimeIntegration.RK2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nGeometry\nA new copy of the geometry object with the simulation results."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BoreFlow",
    "section": "",
    "text": "The Python package ‘boreflow’ provides a simple numerical model using Steep-Slope Shallow Water Equations to describe the flow of overtopping waves and bores.\nThis Python package is developed as part of the Ph.D. research of Niels van der Vegt and is published under the GNU GPL-3 license."
  }
]